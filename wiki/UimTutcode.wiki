= uim-tutcode =

<wiki:toc max_depth="3" />

== これは何？ ==

[http://www.crew.sfc.keio.ac.jp/~chk/index-old.html TUT-Code]入力方式のuim版。

== 使い方 ==

  1. あらかじめ[http://openlab.ring.gr.jp/tcode/soft.html tc2などに含まれている交ぜ書き辞書]などを入手しておいてください。交ぜ書き変換に必要ですが、これはuimに含まれていません。
  1. [UimPref UimPref]を起動してください。
    * [UimToolbar UimToolbar]の設定アイコンをクリック
    * ターミナルエミュレータなどでuim-pref-gtk(もしくはuim-pref-qt4かuim-pref-qt)を実行
  1. 「TUT-Code」→「TUT-Code 辞書」→「交ぜ書き変換辞書ファイル」の「選択...」ボタンを押して、辞書ファイルを指定します。
  1. [UimImSwitcher UimImSwitcher]や[UimToolbar UimToolbar]からTUT-Codeに切り換えてください。
    1. TUT-Codeが見つからない場合は[UimPref UimPref]を起動してください。
    1. 起動したら、「全体設定」→「入力方式の利用準備」→「使用可能にする入力方式」の「編集...」ボタンを押して、左の有効アイテムにTUT-Codeを追加してください。
      * そこにもTUT-Codeが見つからない場合、uim-tutcodeはインストールされていないのかもしれません。確認してみてください。
    1. 追加が完了したら、TUT-Codeで入力したいアプリケーションを再起動してください。
  1. [UimImSwitcher UimImSwitcher]や[UimToolbar UimToolbar]による切り換えは一時的なものです。永続的な変更を望むなら[UimPref UimPref]で設定する必要があります。
  1. [UimPref UimPref]を起動したら、「全体設定」→「入力方式の利用準備」→「標準の入力方式を指定」のチェックボックスにチェックを入れます。
  1. そのすぐ下の「標準の入力方式」に、TUT-Codeをセットしてください。

=== サポートしている入力モード ===

  * 直接入力モード
  * ひらがなモード
  * カタカナモード
  * 記号入力モード
  * 2ストローク記号入力モード

=== 標準で指定されているキー設定 ===

|| 動作 || キー ||
|| オン/オフ || 全角/半角、Shift+Space、Ctrl+\ ||
|| ひらがな/カタカナ入力モードを反転移行 || ' ||
|| 記号入力モードを反転 || Ctrl+_ ||
|| 交ぜ書き変換 || alj ||
|| 部首合成変換 || ala ||
|| 英字変換(SKK abbrev) || al/ ||
|| 仮想鍵盤ウィンドウの表示を反転 || Ctrl+/ ||
|| 補完開始 || Ctrl+. ||
|| 変換開始 || Space ||
|| 次の変換候補へ移動 || Space、↓、Ctrl+n ||
|| 前の変換候補へ移動 || ↑、Ctrl+p ||
|| 候補ウィンドウを次のページへ移動 || PgDn ||
|| 候補ウィンドウを次のページへ移動 || PgUp ||
|| 変換確定 || Return、Ctrl+m、Ctrl+j ||
|| キャンセル || Esc、Ctrl+[、Ctrl+g ||
|| カーソルの左の一字を削除 || BS、Ctrl+h ||
|| 交ぜ書き変換個人辞書への単語登録 || | ||
|| 交ぜ書き変換個人辞書からの単語削除 || ! ||

=== T-CodeやTry-Codeとして使う ===

コード表ファイルを変更することで、T-CodeやTry-Codeとして使えます。

  * [UimPref UimPref]で「TUT-Code」→「コード表ファイル」に/usr/local/share/uim/tcode.scm（T-Code）や/usr/local/share/uim/trycode.scm（Try-Code）を指定してください。

  * 「TUT-Code キー設定1」→「交ぜ書き変換モード」に「fj」を、
  * 「部首合成変換モード」に「jf」を、
  * 「英字変換(SKK abbrev)モード」に「47」(fjの2段上)等、コード表で未割当のストロークを指定してください。

  * 「TUT-Code キー設定1」→「ひらがな/カタカナ入力モードを反転」を空にしてください。

=== vi協調モード ===

vi（クローン）でコマンドモードに戻る時、uimを直接入力モードに戻すことができます。

[UimPref UimPref]で「TUT-Code」→「vi協調モードを有効にする」のチェックボックスにチェックを入れてください。

標準のキー設定は以下のようになっています。

|| 動作 || キー ||
|| vi協調モードでESCとして扱うキー || ESC、Ctrl+[ ||

=== Dvorakキーボード ===

Dvorak配列のキーボード用にコード表を補正します。

[UimPref UimPref]で「TUT-Code」→「Dvorakキーボードを使用する」のチェックボックスにチェックを入れてください。

「表形式の候補ウィンドウのキー配列」として「dvorak」を選んでください。

=== ファイル ===

 * ~/.uim.d/customs/custom-tutcode.scm:: [UimPref UimPref]の「TUT-Code」ファイル。
 * ~/.uim.d/customs/custom-tutcode-keys{1,2}.scm:: [UimPref UimPref]の「TUT-Code キー設定{1,2}」ファイル。
 * ~/.mazegaki.dic:: 交ぜ書き変換個人用辞書ファイル。

== カスタマイズ可能な項目 ==

=== TUT-Codeの変数 ===

|| 動作 || 変数名 || 指定できる値 || 標準値 ||
|| 交ぜ書き変換辞書ファイル || tutcode-dic-filename || "文字列" || "/usr/local/share/tc/mazegaki.dic" ||
|| 交ぜ書き変換個人用辞書ファイル || tutcode-personal-dic-filename || "文字列" || "$HOME/.mazegaki.dic" ||
|| コード表ファイル || tutcode-rule-filename || "文字列" || "/usr/local/share/uim/tutcode-rule.scm" ||
|| 交ぜ書き変換の学習を有効にする || tutcode-enable-mazegaki-learning? || #t #f || #t ||
|| 再帰学習を有効にする || tutcode-use-recursive-learning? || #t #f || #t ||
|| vi協調モードを有効にする || tutcode-use-with-vi? || #t #f || #f ||
|| Dvorakキーボードを使用する || tutcode-use-dvorak? || #t #f || #f ||
|| 2ストローク記号入力モードを使用する || tutcode-use-kigou2-mode? || #t #f || #f ||
|| 対話的な部首合成変換を有効にする || tutcode-use-interactive-bushu-conversion? || #t #f || #f ||
|| bushu.index2 file || tutcode-bushu-index2-filename || "文字列" || "/usr/local/share/tc/bushu.index2" ||
|| bushu.expand file || tutcode-bushu-expand-filename || "文字列" || "/usr/local/share/tc/bushu.expand" ||
|| 候補ウィンドウを使用する || tutcode-use-candidate-window? || #t #f || #t ||
|| 表形式の候補ウィンドウを使用する || tutcode-use-table-style-candidate-window? || #t #f || #f ||
|| 表形式の候補ウィンドウのキー配列 || tutcode-candidate-window-table-layout || 'qwerty-jis<br> 'qwerty-us<br> 'dvorak || 'qwerty-jis ||
|| 見出し表示のキーで候補を確定する || tutcode-commit-candidate-by-label-key? || #t #f || #t ||
|| 候補ウィンドウを表示するために変換キーを押す回数 || tutcode-candidate-op-count || 数字 || 5 ||
|| 候補ウィンドウに一度に表示する候補数 || tutcode-nr-candidate-max || 数字 || 10 ||
|| 記号モードにおいて候補ウィンドウに一度に表示する候補数 || tutcode-nr-candidate-max-for-kigou-mode || 数字 || 10 ||
|| 仮想鍵盤ウィンドウを使用する || tutcode-use-stroke-help-window? || #t #f || #f ||
|| 自動ヘルプウィンドウを使用する || tutcode-use-auto-help-window? || #t #f || #f ||
|| 自動ヘルプウィンドウにキーストロークを表示する || tutcode-auto-help-with-real-keys? || #t #f || #f ||
|| 補完を有効にする || tutcode-use-completion? || #t #f || #f ||
|| 補完の際に考慮する文字数の最小値 || tutcode-completion-chars-min || 数字 || 2 ||
|| 補完の際に考慮する文字数の最大値 || tutcode-completion-chars-max || 数字 || 5 ||
|| 交ぜ書き変換中の予測入力を有効にする || tutcode-use-prediction? || #t #f || #f ||
|| 予測入力が有効になる文字数 || tutcode-prediction-start-char-count || 数字 || 2 ||
|| 熟語ガイドを有効にする || tutcode-use-kanji-combination-guide? || #t #f || #f ||
|| 部首合成変換中の予測入力を有効にする || tutcode-use-bushu-prediction? || #t #f || #f ||

==== TUT-Codeの変数の依存関係 ====

  * tutcode-use-candidate-window? #f
    * tutcode-candidate-op-count
    * tutcode-nr-candidate-max
    * tutcode-nr-candidate-max-for-kigou-mode

  * tutcode-use-auto-help-window? #f
    * tutcode-auto-help-with-real-keys?

  * tutcode-use-table-style-candidate-window?
    * tutcode-candidate-window-table-layout

  * tutcode-use-interactive-bushu-conversion?
    * tutcode-bushu-index2-filename
    * tutcode-bushu-expand-filename

=== TUT-Codeキー設定の変数 ===

|| 動作 || キー変数名 ||
|| オン || tutcode-on-key? ||
|| オフ || tutcode-off-key? ||
|| ひらがな/カタカナ入力モードを反転 || tutcode-kana-toggle-key? ||
|| 記号入力モードを反転 || tutcode-kigou-toggle-key? ||
|| 2ストローク記号入力モードを反転 || tutcode-kigou2-toggle-key? ||
|| 交ぜ書き変換モード || tutcode-mazegaki-start-sequence ||
|| 部首合成変換モード || tutcode-bushu-start-sequence ||
|| 対話的な部首合成変換モード || tutcode-interactive-bushu-start-sequence ||
|| 英字変換(SKK abbrev)モード || tutcode-latin-conv-start-sequence ||
|| 後置型部首合成変換 || tutcode-postfix-bushu-start-sequence ||
|| 直近の自動ヘルプを表示 || tutcode-auto-help-redisplay-sequence ||
|| 交ぜ書き変換の読みをカタカナとして確定する || tutcode-katakana-commit-key? ||
|| 仮想鍵盤ウィンドウの表示を反転 || tutcode-stroke-help-toggle-key? ||
|| 補完開始 || tutcode-begin-completion-key? ||
|| 変換開始 || tutcode-begin-conv-key? ||
|| 確定 || tutcode-commit-key? ||
|| キャンセル || tutcode-cancel-key? ||
|| 次候補 || tutcode-next-candidate-key? ||
|| 前候補 || tutcode-prev-candidate-key? ||
|| 候補ウィンドウの次ページ || tutcode-next-page-key? ||
|| 候補ウィンドウの前ページ || tutcode-prev-page-key? ||
|| バックスペース || tutcode-backspace-key? ||
|| リターン || tutcode-return-key? ||
|| vi協調モードでESCとして扱うキー || tutcode-vi-escape-key? ||
|| 交ぜ書き変換個人辞書への単語登録 || tutcode-register-candidate-key? ||
|| 交ぜ書き変換個人辞書からの単語削除 || tutcode-purge-candidate-key? ||

== 部首合成変換 ==

前置型のみ実装しています。
再帰的な部首合成変換も可能です。
部首合成のアルゴリズムはtc-2.1のものです。

=== 後置型部首合成変換 ===

交ぜ書き変換の読み入力中のみ対応しています。
キー設定で「後置型部首合成変換」の開始キーを設定すると使用可能になります。

=== 対話的な部首合成変換 ===

「対話的な部首合成変換を有効にする」
「bushu.index2 file」「bushu.expand file」を設定し、
キー設定で「対話的な部首合成変換モード」を設定すると使用可能になります。
bushu.index2とbushu.expandファイルは、
tc-2.3.1のインストール時に生成・インストールされるファイルです。

対話的な部首合成変換時の候補ウィンドウ:

http://uim-doc-ja.googlecode.com/svn/wiki/UimTutcodeInteractiveBushu.png

== 交ぜ書き変換 ==

単純な前置型交ぜ書き変換ができます。
交ぜ書き変換辞書はtc2と同じ形式(SKK辞書と同様の形式)です。
 
=== 交ぜ書き変換辞書 ===

交ぜ書き変換辞書(例:/usr/local/share/tc/mazegaki.dic)へのアクセスは
libuim-skk.soの機能を使っています。
そのため、学習機能もSKKと同様の動作になります:

 * 確定した候補は次回の変換から先頭に来ます。
 * 確定した候補は個人辞書(~/.mazegaki.dic)に保存されます。

これらの学習機能をオフにするには、
「交ぜ書き変換の学習を有効にする」のチェックを外してください。

交ぜ書き変換辞書への登録・削除もSKKと同様の動作になります:

 * ~/.mazegaki.dicに登録・削除。
 * 登録: 変換候補の最後まで行ったら再帰的登録モードに移行。
         あるいは、読みを入力後、|を押す。
 * 削除: 辞書からの削除は、削除したい候補を選んで!を押す。
 
=== 活用する語の変換 ===

活用する語の変換は自動的には行いません。
読みに明示的に"―"を付加して変換してください。

=== 英字変換(SKK abbrev)モード ===

英字変換(SKK abbrev)モードを追加しています(al/)。
例えば、「file」を入力して「ファイル」に変換する機能です。

== ヘルプ機能 ==

=== 仮想鍵盤表示 ===

「仮想鍵盤ウィンドウを使用する」での表示・非表示設定の他に、
Ctrl+/で一時的に表示・非表示の切り替えも可能です。
(打ち方があやふやな文字を入力するときだけ表示したい場合があるので)

ホームポジションで左手人差し指打鍵時の表示される仮想鍵盤:

http://uim-doc-ja.googlecode.com/svn/wiki/UimTutcodeVirtualKeyboardHelp.png

=== 自動ヘルプ表示機能 ===

交ぜ書き変換や部首合成変換で入力した文字の打ち方を表示します。
部首合成方法も、簡単な合成に関しては表示可能です。

例:交ぜ書き変換で「憂鬱」を確定した場合の自動ヘルプウィンドウ:

http://uim-doc-ja.googlecode.com/svn/wiki/UimTutcodeAutoHelp.png

==== 直近に表示した自動ヘルプの再表示 ====

キー設定で「直近の自動ヘルプを表示」を設定すると使用可能になります。

== 補完/予測入力・熟語ガイド ==

 * 補完/予測入力・熟語ガイドとも候補ウィンドウに表示します。
 * 補完/予測入力機能を使うには、
   uim-pref-gtk等の「補助予測入力」グループの設定が必要です。
     1. Look-SKKを有効にしてmazegaki.dic相当の辞書ファイルを指定する。
        (主に予測入力用)
     1. Lookを有効にして単語ファイルを指定する。(補完用)
        mazegaki.dicの読みに、漢字としては入っていない単語を補完したい場合。
        (例:「狂奔」「灼熱」)
     1. Sqlite3を有効にする。
        補完/予測入力で選択した候補を学習したい場合、一番上に配置。
   二分探索するので、1,2のファイルはソートしておく必要があります。
 * 補完/予測入力の開始は以下のいずれかのタイミング:
  * 補完: tutcodeオンの状態でtutcode-completion-chars-minの文字数入力時
  * 補完: tutcodeオンの状態でCtrl+.打鍵時
  * 予測入力: 交ぜ書き変換の読み入力状態で
              tutcode-prediction-start-char-countの文字数入力時
  * 予測入力: 交ぜ書き変換の読み入力状態でCtrl+.打鍵時
 * 熟語ガイド(次に入力が予測される文字の打鍵ガイド)は
   補完/予測入力候補から作っています。
 * 補完候補表示にさらにCtrl+.を打鍵すると対象文字を1つ減らして再補完。
   長すぎる文字列を対象に補完された場合に、補完し直しができるように。

補完候補表示:
http://uim-doc-ja.googlecode.com/svn/wiki/UimTutcodeCompletion.png

予測入力候補表示(交ぜ書き変換の読み入力中):

http://uim-doc-ja.googlecode.com/svn/wiki/UimTutcodePrediction.png

== 部首合成変換時の予測入力 ==

部首合成変換辞書を検索して、入力された部首が含まれる項目を表示。

部首合成変換時の予測入力候補表示:

http://uim-doc-ja.googlecode.com/svn/wiki/UimTutcodeBushuPrediction.png

== 記号入力モード ==

Ctrl+_で記号入力モードのトグル。
全角英数入力モードとしても使えるようにしています。

表形式の候補ウィンドウ(記号入力モード):

http://uim-doc-ja.googlecode.com/svn/wiki/UimTutcodeCandwinTblKigou1.png

表形式の候補ウィンドウ(記号入力モードの2ページ目):

http://uim-doc-ja.googlecode.com/svn/wiki/UimTutcodeCandwinTblKigou2.png

== 2ストローク記号入力モード ==

百相鍵盤『き』と同様に、2打鍵で各種の記号・漢字を入力するモード。

2ストローク記号入力モード時の仮想鍵盤:

http://uim-doc-ja.googlecode.com/svn/wiki/UimTutcodeKi.png

== 設定例 ==

コード表の一部を変更したい場合は、例えば~/.uimで以下のように記述する。
{{{
   (require "tutcode.scm")
   (tutcode-rule-set-sequences!
     '(((("s" " "))("―"))                ; 記号の定義を変更
       ((("a" "l" "i"))("捗"))            ; 追加
       ((("d" "l" "u"))("づ" "ヅ"))       ; カタカナを含む場合
       ((("d" "l" "d" "u"))("っ" "ッ"))))
}}}

== スクリーンショット ==

http://uim-doc-ja.googlecode.com/svn/wiki/UimTutcodeCandwin.png

候補ウィンドウ。

http://uim-doc-ja.googlecode.com/svn/wiki/UimTutcodeCandwinTblMaze.png

表形式の候補ウィンドウ。

== trycode-rule生成用スクリプト ==

  * http://groups.google.com/group/uim-ja/t/e9568f3e06c3f482
